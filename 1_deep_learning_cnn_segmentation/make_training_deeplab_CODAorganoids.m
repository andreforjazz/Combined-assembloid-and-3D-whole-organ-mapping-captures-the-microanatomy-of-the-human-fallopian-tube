% Add necessary paths for functions and scripts
path(path,'\\Andre\codes\workflow codes\cnn_training_classification')
path(path,'\\Andre\codes\workflow codes\plots_3D');
path(path,'\\Andre\codes\workflow codes\cnn_training_classification\check_annotations')
warning ('off','all');

% Define the path to annotations
pth='\\Andre\data\Ashleigh fallopian tube\organoids\organoidsforCODA\Annotations\';

% Define the resolution of images in micrometers per pixel (1=10x, 2=5x, 4=16x, 100=no scaling)
umpix=1; 

% Define the path to TIFF images for model training
pthim='\\Andre\data\Ashleigh fallopian tube\organoids\organoidsforCODA\Annotations\10x_python\';

% Define the path to registration information
pthims='\\Andre\data\Ashleigh fallopian tube\organoids\organoidsforCODA\';

% Define the scaling factor from registration images to classified images
scaleDLreg=1; 

% Define the path of images to classify after model is trained
pthclassify='\\Andre\data\Ashleigh fallopian tube\organoids\organoidsforCODA\';

% Define timepoints for the classification
timepoints={'5k_2_mg','10k_2_mg','10k_2_mg_norm','10k_2_mg_Str','10k_4_mg','10k_6_mg','10k_6_mg_Str_B','10k_6_mg_Str_B2','standard'};

% Define the path to testing annotations
pthtest='\\Andre\data\Ashleigh fallopian tube\organoids\organoidsforCODA\test images\';

% Define the path to images for testing annotations
pthtestim='\\Andre\data\Ashleigh fallopian tube\organoids\organoidsforCODA\test images\10x_python\';

% Define the date of the trained model
nm='4_4_2023';

% Path to the deep learning model directory
pthDL=[pth,nm,'\'];

% Define actions to take per annotation class
%   1           2       3    
%[epithelium  stroma  noise];
WS{1}=[0 2 2];      % Remove whitespace if 0, keep only whitespace if 1, keep both if 2
WS{2}=3;            % Add removed whitespace to this class
WS{3}=[1 2 3];      % Rename classes according to this order 
WS{4}=[2 1 3];      % Reverse priority of classes
WS{5}=[];           % Delete classes

% Number of unique classes
numclass=length(unique(WS{3}));

% Tile size for GPU processing
sxy=1000; % Reduce to 750 or 500 if GPU can't handle
nblack=numclass+1;
nwhite=WS{3};nwhite=nwhite(WS{2});

% Re-ordered class numbers (WS3 names)
%      r   g   b 
cmap=[067 023 150;...  % Epithelium (purple)
      242 167 227;...  % Whitespace (white)
      255 255 255];... % Collagen (light pink)

% Define class titles
titles = ["epithelium" "stroma" "whitespace"];
make_cmap_legend(cmap,titles);pause(0.05)

classNames = [titles "black"];
cmap2=cat(1,[0 0 0],cmap)/255;

%% Load and format annotations for each image
[ctlist,numann0]=load_xml_data_loop_organoids(pth,pthim,WS,umpix,nm,numclass,cmap2);

%% Combine tiles  
numann=numann0;

% Create training tiles
ty='training\';obg=[pthDL,ty,'big_tiles\'];
while length(dir([obg,'*tif']))<10
    numann=combine_tiles_density(numann0,numann,ctlist,nblack,pthDL,ty,sxy);
    disp([num2str(length(dir([obg,'*tif']))/2),' images complete'])
end

% Create validation tiles
ty='validation\';obg=[pthDL,ty,'big_tiles\'];
while length(dir([obg,'*tif']))<4
    numann=combine_tiles_density(numann0,numann,ctlist,nblack,pthDL,ty,sxy);
    disp([num2str(length(dir([obg,'*tif']))/2),' images complete'])
end

%% Build and train the model using DeepLab
train_deeplab(pthDL,1:numclass+1,sxy,classNames);

%% Create testing dataset
load_xml_data_loop_organoids(pthtest,pthtestim,WS,umpix,nm,numclass,cmap2);

% Generate confusion matrix using testing data
pthtestdata=[pthtest,'data\'];
deeplab_classification(pthtestim,pthDL,sxy,nm,cmap,nblack,nwhite);

pthclassifytest=[pthtestim,'classification_',nm,'\'];
test_data_organoids(pthtestdata,pthclassifytest,nwhite,nblack,titles);

% Check the classification accuracy with the testing annotations
pthchecktest=[pthtest,'check_annotations\'];
check_test_class_imgs(pthchecktest,pthclassifytest,umpix);

%% Classify all images
path(path,'\\Andre\codes\workflow codes\register images');

% Scaling factor
scale=1;
padnum=WS{3};
padnum=padnum(WS{2});

% Loop through each timepoint and classify images
for kk=1:length(timepoints)
    pthcondition=[pthclassify,timepoints{kk},'\10x\'];
    repeatlist=dir([pthcondition,'*sample*']);

    for lol=1:length(repeatlist)
        
        if ~exist("pthim",'dir');mkdir(pthim);end
        pthim=[pthcondition,repeatlist(lol).name,'\'];
        pthdata=[pthim,'\registered\elastic registration\save_warps\'];
        
        % Segment all images with the trained model
        deeplab_classification(pthim,pthDL,sxy,nm,cmap,nblack,nwhite);
    
        % Align segmented images using the transformation matrices
        % generated by the alignment code (needs to have the alignment step done)
        pthclass=[pthim,'classification_',nm,'\'];
        save_images_elastic_smalld(pthclass,pthdata,scale,padnum);
    end
end
